1.Spring的自动化配置

spring-boot-autoconfigure JAR文件，其中包含了很多配置类。

Spring的条件化配置，实现Condition接口即可。
    class JdbcTemplateCondition implements Condition ...
    @Conditional(JdbcTemplateCondition.class)
    以上例子只有在JdbcTemplateCondition类的条件成立时才会加载配置Bean

起步依赖帮助你专注于应用程序需要的功能类型，而非提供该功能的具体库和版本。
自动配置将你从样板式的配置中解放了出来。

2.覆盖Spring Boot的自动配置

你所要做的仅仅是编写一个显式的皮遏制。
Spring Boot会发现你的配置，随后降低自动配置的优先级，以你的配置为准。

3.配置日志

默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台

4.Spring Framework的核心工作是将所有组件编制在一起

整个过程就算读取配置说明，在应用程序上下文里初始化Bean，将Bean注入依赖它们的其他Bean中。
配置说明可以是XML、基于Java的配置、基于Groovy的配置或其他类型的配置。

4. Actuator

/autoconfig
/configprops
/beans
/dump
/env
/env/{name}
/info
/mappings
/metrics
/metrics/{name}
/shutdown
/trace

5. 部署SpringBoot

- mvn spring-boot:run
- java -jar xxx.jar
- tomcat + war
- java -jar xxx.war